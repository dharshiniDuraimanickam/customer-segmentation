{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNrndpFIWNCaNoYdruCHAjs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dharshiniDuraimanickam/customer-segmentation/blob/main/data%20exploration%20visualization%20basic\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECFuH8k3p05y",
        "outputId": "3c54d8ef-55f7-4d48-94ba-1975e24831c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Employment          Employed  Unemployed\n",
            "Gender Education                        \n",
            "Female Bachelor            0           1\n",
            "       Master              1           0\n",
            "       PhD                 0           1\n",
            "Male   Bachelor            1           0\n",
            "       High School         1           0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = {'Gender': ['Male', 'Female', 'Male', 'Female', 'Female'],\n",
        "        'Education': ['High School', 'Bachelor', 'Bachelor', 'PhD', 'Master'],\n",
        "        'Employment': ['Employed', 'Unemployed', 'Employed', 'Unemployed', 'Employed']}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Create three-variable contingency table\n",
        "table = pd.crosstab([df['Gender'], df['Education']], df['Employment'])\n",
        "print(table)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Simulated data\n",
        "df = pd.DataFrame({\n",
        "    'Trust': [4, 3, 5, 2, 4, 5, 3, 2, 4],\n",
        "    'Reciprocity': [3, 2, 5, 1, 4, 5, 3, 2, 4]\n",
        "})\n",
        "\n",
        "# Scatterplot to visualize relationship\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.regplot(x='Trust', y='Reciprocity', data=df)\n",
        "plt.title('Trust vs Reciprocity')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "z4kVSeLOrEzj",
        "outputId": "cee64c47-1b54-4430-dca5-6bbfa3c3b73a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "# Simulated data\n",
        "df = pd.DataFrame({\n",
        "    'Education': [10, 12, 16, 14, 18],\n",
        "    'Experience': [5, 6, 8, 10, 12],\n",
        "    'Income': [50, 60, 80, 70, 100]\n",
        "})\n",
        "\n",
        "# Add constant for intercept\n",
        "X = df[['Education', 'Experience']]\n",
        "X = sm.add_constant(X)\n",
        "y = df['Income']\n",
        "\n",
        "# Regression model controlling for Experience\n",
        "model = sm.OLS(y, X).fit()\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpfTgh2OrxKa",
        "outputId": "fb29849d-8ae2-4466-ff58-114d5914df4a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                 Income   R-squared:                       0.976\n",
            "Model:                            OLS   Adj. R-squared:                  0.953\n",
            "Method:                 Least Squares   F-statistic:                     41.29\n",
            "Date:                Tue, 05 Nov 2024   Prob (F-statistic):             0.0236\n",
            "Time:                        04:57:18   Log-Likelihood:                -11.959\n",
            "No. Observations:                   5   AIC:                             29.92\n",
            "Df Residuals:                       2   BIC:                             28.75\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         -9.5000     10.542     -0.901      0.463     -54.857      35.857\n",
            "Education      5.3333      1.412      3.778      0.063      -0.741      11.408\n",
            "Experience     0.8333      1.559      0.535      0.646      -5.875       7.541\n",
            "==============================================================================\n",
            "Omnibus:                          nan   Durbin-Watson:                   1.750\n",
            "Prob(Omnibus):                    nan   Jarque-Bera (JB):                0.506\n",
            "Skew:                          -0.081   Prob(JB):                        0.776\n",
            "Kurtosis:                       1.450   Cond. No.                         94.6\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/stats/stattools.py:74: ValueWarning: omni_normtest is not valid with less than 8 observations; 5 samples were given.\n",
            "  warn(\"omni_normtest is not valid with less than 8 observations; %i \"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "# Simulated data\n",
        "df = pd.DataFrame({\n",
        "    'Education': [10, 12, 16, 14, 18],\n",
        "    'Experience': [5, 6, 8, 10, 12],\n",
        "    'Income': [50, 60, 80, 70, 100]\n",
        "})\n",
        "\n",
        "# Add constant for intercept\n",
        "X = df[['Education', 'Experience']]\n",
        "X = sm.add_constant(X)\n",
        "y = df['Income']\n",
        "\n",
        "# Regression model controlling for Experience\n",
        "model = sm.OLS(y, X).fit()\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MAwHaUCGuUcL",
        "outputId": "b4771cc8-2f52-4bfd-e640-cbb8cfee8d72"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                 Income   R-squared:                       0.976\n",
            "Model:                            OLS   Adj. R-squared:                  0.953\n",
            "Method:                 Least Squares   F-statistic:                     41.29\n",
            "Date:                Tue, 05 Nov 2024   Prob (F-statistic):             0.0236\n",
            "Time:                        05:08:25   Log-Likelihood:                -11.959\n",
            "No. Observations:                   5   AIC:                             29.92\n",
            "Df Residuals:                       2   BIC:                             28.75\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         -9.5000     10.542     -0.901      0.463     -54.857      35.857\n",
            "Education      5.3333      1.412      3.778      0.063      -0.741      11.408\n",
            "Experience     0.8333      1.559      0.535      0.646      -5.875       7.541\n",
            "==============================================================================\n",
            "Omnibus:                          nan   Durbin-Watson:                   1.750\n",
            "Prob(Omnibus):                    nan   Jarque-Bera (JB):                0.506\n",
            "Skew:                          -0.081   Prob(JB):                        0.776\n",
            "Kurtosis:                       1.450   Cond. No.                         94.6\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/stats/stattools.py:74: ValueWarning: omni_normtest is not valid with less than 8 observations; 5 samples were given.\n",
            "  warn(\"omni_normtest is not valid with less than 8 observations; %i \"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "# Simulated binary outcome\n",
        "df = pd.DataFrame({\n",
        "    'Education': [10, 12, 16, 14, 18],\n",
        "    'Experience': [5, 6, 8, 10, 12],\n",
        "    'Employed': [1, 0, 1, 1, 0]\n",
        "})\n",
        "\n",
        "# Logistic regression model\n",
        "X = df[['Education', 'Experience']]\n",
        "X = sm.add_constant(X)\n",
        "y = df['Employed']\n",
        "\n",
        "model = sm.Logit(y, X).fit()\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MqLbVQ8w51S",
        "outputId": "408dda0e-8024-4ef0-d9a4-a18c20c793d0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.630235\n",
            "         Iterations 5\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:               Employed   No. Observations:                    5\n",
            "Model:                          Logit   Df Residuals:                        2\n",
            "Method:                           MLE   Df Model:                            2\n",
            "Date:                Tue, 05 Nov 2024   Pseudo R-squ.:                 0.06356\n",
            "Time:                        05:19:41   Log-Likelihood:                -3.1512\n",
            "converged:                       True   LL-Null:                       -3.3651\n",
            "Covariance Type:            nonrobust   LLR p-value:                    0.8074\n",
            "==============================================================================\n",
            "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const          3.5105      5.549      0.633      0.527      -7.364      14.385\n",
            "Education     -0.2171      0.694     -0.313      0.754      -1.576       1.142\n",
            "Experience    -0.0033      0.758     -0.004      0.996      -1.488       1.482\n",
            "==============================================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Simulated data\n",
        "df = pd.DataFrame({\n",
        "    'Education': [10, 12, 16, 14, 18],\n",
        "    'Experience': [5, 6, 8, 10, 12],\n",
        "    'Income': [50, 60, 80, 70, 100],\n",
        "    'Gender': ['Male', 'Female', 'Male', 'Female', 'Male']\n",
        "})\n",
        "\n",
        "# Fit model with interaction between Education and Gender\n",
        "model = smf.ols('Income ~ Education * Gender', data=df).fit()\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JuOxw7yHw_IS",
        "outputId": "0f230474-5267-4b1e-d91d-aef8af50471b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                 Income   R-squared:                       0.977\n",
            "Model:                            OLS   Adj. R-squared:                  0.906\n",
            "Method:                 Least Squares   F-statistic:                     13.92\n",
            "Date:                Tue, 05 Nov 2024   Prob (F-statistic):              0.194\n",
            "Time:                        05:20:04   Log-Likelihood:                -11.932\n",
            "No. Observations:                   5   AIC:                             31.86\n",
            "Df Residuals:                       1   BIC:                             30.30\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "============================================================================================\n",
            "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
            "--------------------------------------------------------------------------------------------\n",
            "Intercept                 2.304e-14     54.243   4.25e-16      1.000    -689.223     689.223\n",
            "Gender[T.Male]             -10.7692     56.291     -0.191      0.880    -726.010     704.471\n",
            "Education                    5.0000      4.160      1.202      0.442     -47.861      57.861\n",
            "Education:Gender[T.Male]     0.9615      4.279      0.225      0.859     -53.403      55.326\n",
            "==============================================================================\n",
            "Omnibus:                          nan   Durbin-Watson:                   1.615\n",
            "Prob(Omnibus):                    nan   Jarque-Bera (JB):                0.359\n",
            "Skew:                          -0.607   Prob(JB):                        0.836\n",
            "Kurtosis:                       2.500   Cond. No.                         521.\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/stats/stattools.py:74: ValueWarning: omni_normtest is not valid with less than 8 observations; 5 samples were given.\n",
            "  warn(\"omni_normtest is not valid with less than 8 observations; %i \"\n"
          ]
        }
      ]
    }
  ]
}